{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\PCI127\\\\Desktop\\\\TatvSoft-Training-TypeScript\\\\websocket-example\\\\webSocketClient\\\\src\\\\index.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport ReactDOM from 'react-dom';\nimport { w3cwebsocket as W3cWebSocket } from 'websocket';\nimport 'antd/dist/antd.css';\nimport { Card, Avatar, Input, Typography } from 'antd';\nimport './index.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst client = new W3cWebSocket('ws://127.0.0.1:8000');\nconst {\n  Search\n} = Input;\nconst {\n  Text\n} = Typography;\nconst {\n  Meta\n} = Card;\nexport const App = () => {\n  _s();\n\n  const [userInfo, setUser] = useState({\n    userName: '',\n    isLoggedIn: false\n  });\n  const [usermessage, setUserMessage] = useState([]);\n  const [searchval, setSearchVal] = useState(\"\");\n  useEffect(() => {\n    client.onopen = () => {\n      console.log('Websocket Client connected');\n    };\n\n    client.onmessage = message => {\n      const dataFromServer = JSON.parse(message.data);\n      console.log('get replay', dataFromServer);\n\n      if (dataFromServer.type === 'message') {\n        setUserMessage([...usermessage, {\n          newMsg: dataFromServer.msg,\n          newUser: dataFromServer.currUser\n        }]);\n      }\n    };\n\n    console.log('new', usermessage);\n  }, [usermessage]);\n\n  const onButtonClicked = value => {\n    client.send(JSON.stringify({\n      type: \"message\",\n      msg: value,\n      currUser: userInfo.userName\n    }));\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"main\",\n    children: userInfo.isLoggedIn ? /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"title\",\n        children: /*#__PURE__*/_jsxDEV(Text, {\n          id: \"main-heading\",\n          type: \"secondary\",\n          style: {\n            fontSize: '36px'\n          },\n          children: [\"Websocket Chat: \", userInfo.userName]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 62,\n          columnNumber: 29\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 25\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"bottom\",\n        children: /*#__PURE__*/_jsxDEV(Search, {\n          placeholder: \"Enter UserName\",\n          enterButton: \"Send\",\n          size: \"Large\",\n          onChange: e => setSearchVal(e.target.value),\n          onSearch: value => onButtonClicked(value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 29\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 25\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 21\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        padding: '200px 40px'\n      },\n      children: /*#__PURE__*/_jsxDEV(Search, {\n        placeholder: \"Enter UserName\",\n        enterButton: \"Login\",\n        size: \"Large\",\n        onSearch: value => setUser({\n          isLoggedIn: true,\n          userName: value\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 25\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 23\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 57,\n    columnNumber: 9\n  }, this);\n};\n\n_s(App, \"eQDnaQM1Aa4M/s0XVQnrcpBxWbQ=\");\n\n_c = App;\nReactDOM.render( /*#__PURE__*/_jsxDEV(App, {}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 88,\n  columnNumber: 17\n}, this), document.getElementById('root'));\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["C:/Users/PCI127/Desktop/TatvSoft-Training-TypeScript/websocket-example/webSocketClient/src/index.js"],"names":["React","useEffect","useState","ReactDOM","w3cwebsocket","W3cWebSocket","Card","Avatar","Input","Typography","client","Search","Text","Meta","App","userInfo","setUser","userName","isLoggedIn","usermessage","setUserMessage","searchval","setSearchVal","onopen","console","log","onmessage","message","dataFromServer","JSON","parse","data","type","newMsg","msg","newUser","currUser","onButtonClicked","value","send","stringify","fontSize","e","target","padding","render","document","getElementById"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { w3cwebsocket as W3cWebSocket } from 'websocket';\r\nimport 'antd/dist/antd.css';\r\nimport {Card, Avatar, Input, Typography } from 'antd';\r\n\r\nimport './index.css'\r\n\r\n\r\nconst client = new W3cWebSocket('ws://127.0.0.1:8000');\r\nconst { Search } = Input;\r\nconst { Text } = Typography;\r\nconst { Meta } = Card;\r\n\r\nexport const App = () => {\r\n\r\n    const [userInfo, setUser] = useState({\r\n        userName: '',\r\n        isLoggedIn: false\r\n    });\r\n    const [usermessage, setUserMessage] = useState([]);\r\n    const [searchval, setSearchVal] = useState(\"\");\r\n\r\n\r\n    useEffect(() => {\r\n        client.onopen = () => {\r\n            console.log('Websocket Client connected');\r\n        };\r\n        client.onmessage = (message) => {\r\n            const dataFromServer = JSON.parse(message.data);\r\n            console.log('get replay', dataFromServer);\r\n\r\n            if (dataFromServer.type === 'message') {\r\n                setUserMessage([\r\n                    ...usermessage,\r\n                    {\r\n                        newMsg: dataFromServer.msg,\r\n                        newUser: dataFromServer.currUser\r\n                    }\r\n                ])\r\n            }\r\n\r\n\r\n        };\r\n        console.log('new', usermessage)\r\n    }, [usermessage]);\r\n\r\n    const onButtonClicked = (value) => {\r\n        client.send(JSON.stringify({\r\n            type: \"message\",\r\n            msg: value,\r\n            currUser: userInfo.userName\r\n        }));\r\n    }\r\n\r\n    return (\r\n        <div className=\"main\">\r\n            {\r\n                userInfo.isLoggedIn ?\r\n                    <div>\r\n                        <div className=\"title\">\r\n                            <Text id=\"main-heading\" type=\"secondary\" style={{ fontSize: '36px' }}>Websocket Chat: {userInfo.userName}</Text>\r\n                        </div>\r\n                        <div className=\"bottom\">\r\n                            <Search\r\n                                placeholder=\"Enter UserName\"\r\n                                enterButton=\"Send\"\r\n                                size=\"Large\"\r\n                                onChange={(e) => setSearchVal(e.target.value)}\r\n                                onSearch={ value => onButtonClicked(value) }\r\n                            />\r\n                        </div>\r\n                    </div>\r\n                    : <div style={{ padding: '200px 40px' }}>\r\n                        <Search\r\n                            placeholder=\"Enter UserName\"\r\n                            enterButton=\"Login\"\r\n                            size=\"Large\"\r\n                            onSearch={value => setUser({ isLoggedIn: true, userName: value })}\r\n                        />\r\n                    </div>\r\n            }\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));"]},"metadata":{},"sourceType":"module"}